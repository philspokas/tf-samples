# Terraform plan and apply

trigger:
- master

pool:
  name: 'Terraform-windows-agents'

variables:
- name: target-dir
  value: "./logicapps"
- group: samples
- group: tags

jobs:
- job: init_and_plan
  steps:
  - powershell: .\build\create-tfvars.ps1
    displayName: 'Build tfvars'
    workingDirectory: $(target-dir)
  
  - task: PowerShell@2
    displayName: 'terraform init'
    inputs:
      targetType: 'inline'
      script: |
        terraform init `
          -backend-config="resource_group_name=$(resource_group_name)" `
          -backend-config="storage_account_name=$(tfStorageAccount)" `
          -backend-config="container_name=$(tfStateContainerName)" `
          -backend-config="access_key=$(tfAccountKey)" `
          -backend-config="key=$(MyEnvironmentName).sample.tfstate" `
          -input=false  3>warn.txt 2>error.txt >output.txt
          "---- warnings --- "
          type warn.txt
          "--- errors ---"
          type error.txt
          "--- output ---"
          type output.txt
      errorActionPreference: 'continue'
      workingDirectory: '$(target-dir)'

  - task: PowerShell@2
    displayName: plan
    inputs:
      targetType: 'inline'
      script: |
        $out = "$(Build.ArtifactStagingDirectory)/$(target-dir)/output"
        New-Item -Path $out -ItemType Directory
        terraform plan -out plan.out  `
          -var-file "main.tfvars" `
          -var "subscription_id=$(subscription_id)" `
          -var "client_id=$(client_id)" `
          -var "client_secret=$(client_secret)" `
          -var "tenant_id=$(tenant_id)" `
          -input=false -no-color  3>$out/warn.txt 2>$out/error.txt >$out/output.txt
        "--- errors ---------------------------------------------------------------------------------------------"
        type $out/error.txt
        "--- warnings -------------------------------------------------------------------------------------------"
        type $out/warn.txt
        "--- output ---------------------------------------------------------------------------------------------"
        type $out/output.txt
        Get-Content error.txt | Foreach-Object {
          Write-Host "##vso[task.LogIssue type=error;]$_"
        }
        # Write-Host "##vso[task.uploadsummary]$out/output.txt"
      errorActionPreference: 'continue'
      workingDirectory: '$(target-dir)'

  - publish: $(Build.ArtifactStagingDirectory)/$(target-dir)/output
    artifact: Output
    continueOnError: true

  - publish: $(Build.SourcesDirectory)/$(target-dir)/.terraform
    artifact: Terraform

  - publish: $(Build.SourcesDirectory)/$(target-dir)/plan.out
    artifact: Plan
  
# - job: confirm_plan
#   dependsOn: init_and_plan
#   displayName: Review and confirm plan  
#   pool: server    
#   timeoutInMinutes: 2880 # times out in 2 days
#   steps:   
#   - task: ManualValidation@0
#     timeoutInMinutes: 1440 # task times out in 1 day
#     inputs:
#       notifyUsers: |
#         $(ValidationUsers)
#       instructions: 'Review and validate plan'
#       onTimeout: 'resume'

- job: apply
  dependsOn: confirm_plan
    
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Download Plan
    inputs:
      buildType: 'current'
      artifactName: 'Plan'
  
  - task: DownloadPipelineArtifact@2
    displayName: Download Terraform Configuration
    inputs:
      buildType: 'current'
      artifactName: 'Terraform'
      targetPath: '$(Build.SourcesDirectory)/$(target-dir)/.terraform'

  - task: PowerShell@2
    displayName: 'terraform apply'
    inputs:
      targetType: 'inline'
      script: |
        ls .terraform
        $out = "$(Build.ArtifactStagingDirectory)/$(target-dir)/applyoutput"
        New-Item -Path $out -ItemType Directory
        Move-Item -Path $(Pipeline.Workspace)/plan.out -Destination $(Build.SourcesDirectory)/$(target-dir)
        ls
        type .terraform/terraform.tfstate
        terraform apply plan.out 3>$out/warn.txt 2>$out/error.txt >$out/output.txt
        ls
      errorActionPreference: 'continue'
      showWarnings: true
      workingDirectory: '$(target-dir)'

  - publish: $(Build.ArtifactStagingDirectory)/$(target-dir)/applyoutput
    artifact: ApplyOutput
    continueOnError: true

  # - task: PowerShell@2
  #   displayName: 'terraform init'
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       terraform init `
  #         -backend-config="resource_group_name=$(resource_group_name)" `
  #         -backend-config="storage_account_name=$(tfStorageAccount)" `
  #         -backend-config="container_name=$(tfStateContainerName)" `
  #         -backend-config="access_key=$(tfAccountKey)" `
  #         -backend-config="key=$(MyEnvironmentName).sample.tfstate" `
  #         -input=false  3>warn.txt 2>error.txt >output.txt
  #         "---- warnings --- "
  #         type warn.txt
  #         "--- errors ---"
  #         type error.txt
  #         "--- output ---"
  #         type output.txt
  #     errorActionPreference: 'continue'
  #     workingDirectory: '$(target-dir)'
  # - task: AzureCLI@2
  #   displayName: apply
  #   inputs:
  #     azureSubscription: 'mti-policy-01-srvc'
  #     scriptType: 'ps'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       terraform apply  `
  #         -var-file "main.tfvars" `
  #         -var "subscription_id=$(subscription_id)" `
  #         -var "client_id=$env:servicePrincipalId" `
  #         -var "client_secret=$env:servicePrincipalKey" `
  #         -var "tenant_id=$env:tenantId" `
  #         -input=false
  #     powerShellErrorActionPreference: 'continue'
  #     addSpnToEnvironment: true
  #     workingDirectory: '$(target-dir)'
    
  # publish results
  # - task: PublishToAzureServiceBus@1
  #   inputs:
  #     signPayload: false
  #     waitForCompletion: false